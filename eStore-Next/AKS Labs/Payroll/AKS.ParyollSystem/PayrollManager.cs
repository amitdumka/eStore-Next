using AKS.Payroll.Database;
using AKS.Shared.Commons.Extensions.DateTimeExtensions;
using AKS.Shared.Payroll.Models;
using System.Globalization;

namespace AKS.ParyollSystem
{
    public class PayrollManager
    {
        /// <summary>
        /// Calculate for a month for a particular employee
        /// </summary>
        /// <param name="db"></param>
        /// <param name="empId"></param>
        /// <param name="onDate"></param>
        public bool CalculateMonthlyAttendance(AzurePayrollDbContext db, string empId, DateTime onDate)
        {
            if (db == null) db = new AzurePayrollDbContext();

            var attdList = db.Attendances.Where(x => x.EmployeeId == empId && x.OnDate.Year == onDate.Year && x.OnDate.Month == onDate.Month).ToList();

            MonthlyAttendance ma = new()
            {
                NoOfWorkingDays = 26,
                MonthlyAttendanceId = IdentityGenerator.GenerateMonthlyAttendance(onDate, empId.Split("/")[3]),
                StoreId = attdList.FirstOrDefault().StoreId,
                EmployeeId = empId,
                OnDate = onDate,
                EntryStatus = EntryStatus.Added,
                IsReadOnly = true,
                Remarks = "AutoGenerated on " + DateTime.Now,
                Present = attdList.Where(c => c.Status == AttUnit.Present).Count(),
                Absent = attdList.Where(c => c.Status == AttUnit.Absent || c.Status == AttUnit.OnLeave).Count(),
                PaidLeave = attdList.Where(c => c.Status == AttUnit.PaidLeave || c.Status == AttUnit.SickLeave).Count(),
                HalfDay = attdList.Where(c => c.Status == AttUnit.HalfDay).Count(),
                MarkedDeleted = false,
                Sunday = attdList.Where(c => c.Status == AttUnit.Sunday).Count(),
                CasualLeave = attdList.Where(c => c.Status == AttUnit.CasualLeave).Count(),
                WeeklyLeave = attdList.Where(c => c.Status == AttUnit.SundayHoliday).Count(),
                UserId = "AutoAdmin",
                Holidays = attdList.Where(c => c.Status == AttUnit.Holiday || c.Status == AttUnit.StoreClosed).Count(),
            };

            if (!ma.Valid)
                ma.Remarks += $"#Error#";
            if (db.MonthlyAttendances.Find(ma.MonthlyAttendanceId) != null)

                db.MonthlyAttendances.Update(ma);
            else db.MonthlyAttendances.Add(ma);

            return db.SaveChanges() > 0;
        }

        /// <summary>
        /// Calculate for all month for an employee
        /// </summary>
        /// <param name="db"></param>
        /// <param name="empId"></param>
        public bool CalculateMonthlyAttendance(AzurePayrollDbContext db, string empId)
        {
            if (db == null) db = new AzurePayrollDbContext();
            var yearList = db.Attendances.Where(c => c.EmployeeId == empId).Select(c => c.OnDate.Year).Distinct().ToList();
            //yearList.Distinct();
            foreach (var year in yearList)
            {
                var attnds = db.Attendances.Where(c => c.EmployeeId == empId && c.OnDate.Year == year).ToList();

                for (int i = 1; i <= 12; i++)
                {
                    DateTime onDate = new DateTime(year, i, 1);

                    var attdList = attnds.Where(x => x.EmployeeId == empId && x.OnDate.Year == year
                    && x.OnDate.Month == i).ToList();
                    if (attdList != null && attdList.Count > 0)
                    {
                        MonthlyAttendance ma = new()
                        {
                            NoOfWorkingDays = 26,
                            MonthlyAttendanceId = IdentityGenerator.GenerateMonthlyAttendance(onDate, empId.Split("/")[3]),
                            StoreId = attdList.FirstOrDefault().StoreId,
                            EmployeeId = empId,
                            OnDate = onDate,
                            EntryStatus = EntryStatus.Added,
                            IsReadOnly = true,
                            Remarks = "AutoGenerated on " + DateTime.Now,
                            Present = attdList.Where(c => c.Status == AttUnit.Present).Count(),
                            Absent = attdList.Where(c => c.Status == AttUnit.Absent || c.Status == AttUnit.OnLeave).Count(),
                            PaidLeave = attdList.Where(c => c.Status == AttUnit.PaidLeave || c.Status == AttUnit.SickLeave).Count(),
                            HalfDay = attdList.Where(c => c.Status == AttUnit.HalfDay).Count(),
                            MarkedDeleted = false,
                            Sunday = attdList.Where(c => c.Status == AttUnit.Sunday).Count(),
                            CasualLeave = attdList.Where(c => c.Status == AttUnit.CasualLeave).Count(),
                            WeeklyLeave = attdList.Where(c => c.Status == AttUnit.SundayHoliday).Count(),
                            UserId = "AutoAdmin",
                            Holidays = attdList.Where(c => c.Status == AttUnit.Holiday || c.Status == AttUnit.StoreClosed).Count(),
                        };
                        if (db.MonthlyAttendances.Find(ma.MonthlyAttendanceId) != null)

                            db.MonthlyAttendances.Update(ma);
                        else db.MonthlyAttendances.Add(ma);
                    }
                }
            }
            int saveRecord = db.SaveChanges();
            if (saveRecord > 0 && (yearList.Count * 12) == saveRecord) return true; else return false;
        }

        /// <summary>
        /// Calculate for a month for all employee
        /// </summary>
        /// <param name="db"></param>
        /// <param name="onDate"></param>
        public bool CalculateMonthlyAttendance(AzurePayrollDbContext db, DateTime onDate)
        {
            if (db == null) db = new AzurePayrollDbContext();
            var attL = db.Attendances.Where(c => c.OnDate.Year == onDate.Year && c.OnDate.Month == onDate.Month).ToList();
            if (attL.Count > 0)
            {
                var empIdList = attL.Select(c => c.EmployeeId).Distinct().ToList();
                foreach (var empId in empIdList)
                {
                    var attdList = attL.Where(c => c.EmployeeId == empId).ToList();
                    MonthlyAttendance ma = new()
                    {
                        NoOfWorkingDays = 26,
                        MonthlyAttendanceId = IdentityGenerator.GenerateMonthlyAttendance(onDate, empId.Split("/")[3]),
                        StoreId = attdList.FirstOrDefault().StoreId,
                        EmployeeId = empId,
                        OnDate = onDate,
                        EntryStatus = EntryStatus.Added,
                        IsReadOnly = true,
                        Remarks = "AutoGenerated on " + DateTime.Now,
                        Present = attdList.Where(c => c.Status == AttUnit.Present).Count(),
                        Absent = attdList.Where(c => c.Status == AttUnit.Absent || c.Status == AttUnit.OnLeave).Count(),
                        PaidLeave = attdList.Where(c => c.Status == AttUnit.PaidLeave || c.Status == AttUnit.SickLeave).Count(),
                        HalfDay = attdList.Where(c => c.Status == AttUnit.HalfDay).Count(),
                        MarkedDeleted = false,
                        Sunday = attdList.Where(c => c.Status == AttUnit.Sunday).Count(),
                        CasualLeave = attdList.Where(c => c.Status == AttUnit.CasualLeave).Count(),
                        WeeklyLeave = attdList.Where(c => c.Status == AttUnit.SundayHoliday).Count(),
                        UserId = "AutoAdmin",
                        Holidays = attdList.Where(c => c.Status == AttUnit.Holiday || c.Status == AttUnit.StoreClosed).Count(),
                    };

                    if (!ma.Valid)
                        ma.Remarks += $"#Error#";
                    if (db.MonthlyAttendances.Find(ma.MonthlyAttendanceId) != null)

                        db.MonthlyAttendances.Update(ma);
                    else db.MonthlyAttendances.Add(ma);
                }
                int saveRecord = db.SaveChanges();
                if (saveRecord > 0 && empIdList.Count == saveRecord) return true; else return false;
            }
            else return false;
        }

        public void ProcessMonthlyAttendanceForAllEmployee(AzurePayrollDbContext db)
        {
            if (db == null) db = new AzurePayrollDbContext();

            var emplist = db.Attendances.GroupBy(c => c.EmployeeId).Select(c => c.Key).ToList();
            if (emplist.Any())
            {
                foreach (var empId in emplist)
                {
                    CalculateMonthlyAttendance(db, empId);
                }
            }
        }
    }

    public class PayrollValidator
    {
        /// <summary>
        /// Validate Attendance for Employee for a month return 0 if true else return differance
        /// </summary>
        /// <param name="db"></param>
        /// <param name="empId"></param>
        /// <param name="onDate"></param>
        /// <returns>return 0 if true else return differance in days</returns>
        public int ValidateAttendances(AzurePayrollDbContext db, string empId, DateTime onDate)
        {
            int noOyDays = DateTime.DaysInMonth(onDate.Year, onDate.Month);
            if (db == null) db = new AzurePayrollDbContext();
            var count = db.Attendances.Where(c => c.EmployeeId == empId && c.OnDate.Year == onDate.Year && c.OnDate.Month == onDate.Month).Count();
            return noOyDays - count;
        }

        public MissingAttendance FindMissingAttendances(AzurePayrollDbContext db, string employeeId, DateTime startDate, DateTime? endDate)
        {
            if (endDate == null) endDate = DateTime.Today;

            var emp = db.Employees.Find(employeeId);
            MissingAttendance missing = new()
            {
                EmployeeId = employeeId,
                EmployeeName = emp.StaffName,
                JoiningDate = emp.JoiningDate,
                LeavingDate = emp.LeavingDate,
                MissingDates = new List<DateTime>(),
                DuplicateDates = new List<DateTime>()
            };
            if (startDate.Month >= missing.JoiningDate.Month && startDate.Year >= missing.JoiningDate.Year)
            {
                var monthYearList = MonthsBetween(startDate, endDate.Value).ToList();
                foreach (var month in monthYearList)
                {
                    int diff = ValidateAttendances(db, employeeId, new DateTime(month.Year, month.Month, 1));
                    if (diff > 0)
                    {
                        // Missing Attendance.
                        missing.Found = true;

                        var days = db.Attendances.Where(c => c.EmployeeId == employeeId
                        && c.OnDate.Year == month.Year && c.OnDate.Month == month.Month).Select(c => c.OnDate.Date).OrderBy(c => c).ToList();

                        int noOyDays = DateTime.DaysInMonth(month.Year, month.Month);

                        missing.MissingDates.AddRange(new DateTime(month.Year, month.Month, 1)
                            .MissingDates(new DateTime(month.Year, month.Month, noOyDays), days).ToList());
                    }
                    else if (diff < 0)
                    {
                        //Possible duplciate attendance
                        missing.Duplicates = true;
                        var days = db.Attendances.Where(c => c.EmployeeId == employeeId
                       && c.OnDate.Year == month.Year && c.OnDate.Month == month.Month).GroupBy(c => c.OnDate)
                            .Select(c => new { c.Key, Count = c.Count() }).OrderBy(c => c).ToList();
                        var missdays = days.Where(c => c.Count > 1).Select(c => c.Key).ToList();
                        missing.DuplicateDates.AddRange(missdays);

                        var missingDateList = db.Attendances.Where(c => c.EmployeeId == employeeId
                      && c.OnDate.Year == month.Year && c.OnDate.Month == month.Month).GroupBy(x => new { Date = x.OnDate.Date }, s => new { InsertCount = s, })
                .Select(g => new { Date = g.Key, Count = g.Count() }).Where(c => c.Count > 10).ToList();
                    }
                }
            }
            else
            {
                missing.Found = false;
            }

            if(missing.Found && endDate.Value.Date == DateTime.Today.Date)
            {
                //TODO: need to reduce 
                var dates= endDate.Value.AddDays(1).Range(new DateTime(endDate.Value.Year, endDate.Value.Month, 
                    DateTime.DaysInMonth(endDate.Value.Year,endDate.Value.Month))).ToList();
                foreach (var date in dates)
                {
                    missing.MissingDates.Remove(date);
                }
               
            }
            return missing;
        }

        [Obsolete]
        public SortedDictionary<DateTime, int> findDuplicateDate(AzurePayrollDbContext db)
        {
            if (db == null) db = new AzurePayrollDbContext();

            var dLi = db.Attendances
                .Where(c => c.OnDate.Year == 2021)
                .GroupBy(x => new { Date = x.OnDate.Date }, s => new { InsertCount = s, })
                .Select(g => new { Date = g.Key, Count = g.Count() }).Where(c => c.Count > 1).ToList();
            SortedDictionary<DateTime, int> found = new SortedDictionary<DateTime, int>();
            foreach (var d in dLi)
                found.Add(d.Date.Date, d.Count);

            return found;
        }

        public IEnumerable<(int Month, int Year)> MonthsBetween(DateTime startDate, DateTime endDate)
        {
            DateTime sDate, eDate;
            if (endDate > startDate)
            {
                sDate = new DateTime(startDate.Year, startDate.Month, 1);
                eDate = new DateTime(endDate.Year, endDate.Month, 1); ;
            }
            else
            {
                sDate = new DateTime(endDate.Year, endDate.Month, 1);
                eDate = new DateTime(startDate.Year, startDate.Month, 1);
            }
            var dateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat;
            while (sDate <= eDate)
            {
                yield return (sDate.Month, sDate.Year);
                sDate = sDate.AddMonths(1);
            }
        }

        public static IEnumerable<(string Month, int Year)> MonthsNameBetween(DateTime startDate, DateTime endDate)
        {
            DateTime iterator;
            DateTime limit;

            if (endDate > startDate)
            {
                iterator = new DateTime(startDate.Year, startDate.Month, 1);
                limit = endDate;
            }
            else
            {
                iterator = new DateTime(endDate.Year, endDate.Month, 1);
                limit = startDate;
            }

            var dateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat;
            while (iterator <= limit)
            {
                yield return (
                    dateTimeFormat.GetMonthName(iterator.Month),
                    iterator.Year
                );

                iterator = iterator.AddMonths(1);
            }
        }
    }

    //TODO: move to DTO's

    public class MissingAttendance
    {
        public string EmployeeId { get; set; }
        public string EmployeeName { get; set; }
        public DateTime JoiningDate { get; set; }
        public DateTime? LeavingDate { get; set; }
        public List<DateTime> MissingDates { get; set; }
        public List<DateTime> DuplicateDates { get; set; }
        public bool Found { get; set; }
        public bool Duplicates { get; set; }
    }
}

//// Initialize diff
//int diffD = days[0] - 0;
//for (int i = 0; i < noOyDays; i++)
//{
//    // Check if diff and days[i]-i
//    // both are equal or not
//    if (days[i] - i != diffD)
//    {
//        // Loop for consecutive
//        // missing elements
//        while (diffD < days[i] - i)
//        {
//            missing.MissingDates.Add(new DateTime(month.Year, month.Month, i + diffD));
//            diffD++;
//        }
//    }
//}