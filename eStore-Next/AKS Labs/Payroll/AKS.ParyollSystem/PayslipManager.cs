using AKS.Payroll.Database;
using AKS.Shared.Payroll.Models;
using Microsoft.EntityFrameworkCore;

namespace AKS.ParyollSystem;

public class PayslipManager
{
    public static decimal GetBasicSalaryCalculation(decimal absent, decimal days, decimal rate, int nDays)
    {
        decimal basicSalary = 0;
        if (nDays == 31)
        {
            if (absent == 0) basicSalary = rate * (days - (decimal)0.75);
            else basicSalary = rate * (days - 1);
        }
        else if (nDays == 29)
        {
            if (absent == 0) basicSalary = rate * (days + 1);
            else basicSalary = rate * days;
        }
        else if (nDays == 28)
        {
            if (absent == 0) basicSalary = rate * (days + 2);
            else if (absent == 1) basicSalary = rate * (days * (decimal)0.75);
            else basicSalary = rate * days;
        }
        else
        {
            basicSalary = rate * days;
        }
        return basicSalary;
    }

    public static async Task<Salary> GetSalary(AzurePayrollDbContext db, string empId, DateTime onDate)
    {
        //TODO: make this function to handle 26/30 days working days concept
        var sal = await db.Salaries.Where(c => c.EmployeeId == empId &&
        c.EffectiveDate.Date <= onDate.Date && c.CloseDate.Value.Date >= onDate.Date)
            .OrderByDescending(c => c.EffectiveDate)
            .ToListAsync();
        if (sal != null && sal.Count > 0)
            return sal[0];
        else return null;
    }

    public static async Task<decimal> GetSalaryRate(AzurePayrollDbContext db, string empId, DateTime onDate)
    {
        //TODO: make this function to handle 26/30 days working days concept
        var sal = await db.Salaries.Where(c => c.EmployeeId == empId &&
        c.EffectiveDate.Date <= onDate.Date && c.CloseDate.Value.Date >= onDate.Date)
            .OrderByDescending(c => c.EffectiveDate)
            .ToListAsync();
        if (sal != null && sal.Count > 0)
            return sal[0].BasicSalary;
        else return 0;
    }

    public async Task<PaySlip> GeneratePayslipForEmployee(AzurePayrollDbContext db, string empId, DateTime onDate)
    {
        bool dbDispose = true;
        if (db == null) db = new AzurePayrollDbContext();
        else dbDispose = false;

        var ma = db.MonthlyAttendances.Include(c => c.Employee).Where(c => c.EmployeeId == empId && c.OnDate.Year == onDate.Year && c.OnDate.Month == onDate.Month && !c.MarkedDeleted).FirstOrDefault();

        if (ma == null)
        {
            new PayrollManager().CalculateMonthlyAttendance(db, empId, onDate);
            ma = db.MonthlyAttendances.Where(c => c.EmployeeId == empId && c.OnDate.Year == onDate.Year && c.OnDate.Month == onDate.Month && !c.MarkedDeleted).FirstOrDefault();
        }

        if (ma != null && ma.BillableDays > 0)
        {
            var salary = await GetSalary(db, empId, onDate);
            if (salary == null)
            {
                if (dbDispose) db.Dispose();
                return null;
            }
            var salaryRate = salary.BasicSalary; //GetSalaryRate(db, empId, onDate);
            decimal salaryPerDay = ma.BillableDays <= 15 ? (salaryRate / 30) : (salaryRate / 26);
            decimal basicSalary = GetBasicSalaryCalculation(ma.Absent, ma.BillableDays, salaryPerDay, ma.DayInMonths);

            PaySlip paySlip = new PaySlip
            {
                BasicSalaryRate = salaryPerDay,
                EmployeeId = empId,
                BasicSalary = basicSalary,
                EntryStatus = EntryStatus.Added,
                IsReadOnly = true,
                MarkedDeleted = false,
                Month = onDate.Month,
                Year = onDate.Year,
                OnDate = DateTime.Now,
                UserId = "WinUI",
                StoreId = ma.StoreId,
                IsTailoring = ma.Employee.IsTailors,
                AdvanceDeducations = 0,
                SalaryId = salary.SalaryId,
                Remarks = $"AutoGenerated on{DateTime.Now} ",
                CurrentSalary = salary,
                LastPcsAmount = 0,
                LastPCsIncentive = 0,
                NoOfDaysPresent = ma.BillableDays,
                PFDeductions = 0,
                GrossSalary = 0,
                OtherDeductions = 0,
                OthersIncentive = 0,
                SaleIncentive = 0,
                StandardDeductions = 0,
                TDSDeductions = 0,
                TotalSale = 0,
                WOWBillAmount = 0,
                WOWBillIncentive = 0,
                PaySlipId = $"{onDate.Year}/{onDate.Month}-{DateTime.Today.Year}/{DateTime.Now.Month}/{empId.Split("/")[3]}"
            ,
                TotalPayableSalary = basicSalary,
                WorkingDays = ma.NoOfWorkingDays
            };
            // Check it exist then update else add.
            if (db.PaySlips.Any(c => c.PaySlipId == paySlip.PaySlipId))
            {
                paySlip.EntryStatus = EntryStatus.Updated;
                db.PaySlips.Update(paySlip);
            }
            else
            {
                if (dbDispose) db.Dispose();
                db.PaySlips.Add(paySlip);
            }
            return paySlip;
        }
        else
        {
            if (dbDispose) db.Dispose();
            return null;
        }
    }

    public async Task<SortedDictionary<string, PaySlip>> GeneratePayslips(AzurePayrollDbContext db, DateTime onDate)
    {
        bool dbDispose = true;
        SortedDictionary<string, PaySlip> paySlips = new SortedDictionary<string, PaySlip>();
        if (db == null) db = new AzurePayrollDbContext();
        else dbDispose = false;

        var empids = db.MonthlyAttendances.Include(c => c.Employee).Where(c => c.OnDate.Month == onDate.Month && c.OnDate.Year == onDate.Year).Select(c => new { c.EmployeeId, c.Employee.StaffName }).
                 Distinct().ToList();
        foreach (var emp in empids)
        {
            var slip = await GeneratePayslipForEmployee(db, emp.EmployeeId, onDate);
            if (slip != null) paySlips.Add(emp.StaffName, slip);
        }
        return paySlips;
    }
}